name: Regression
on:
  workflow_dispatch:
  repository_dispatch:
  schedule:
    - cron:  '0 1 * * SAT' # runs at 2am CET saturdays

  push:
    branches:
      - '**'

  pull_request:
    types: [opened, reopened, ready_for_review]
    paths-ignore:
      - '**'
      - '!.github/workflows/make_self_hosted_github_runner.yml'

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  instance_id: i-0b2d4c509fc3f1e3a
  gh_issue_repo: Tmonster/test-ec2-github-action-runner

jobs:
  start-runner:
    name: Start self-hosted ec2 runner
    runs-on: ubuntu-latest
  
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Start EC2 runner
        shell: bash
        run: aws ec2 start-instances --instance-id ${{ env.instance_id }}

      - name: Create issue if failure
        if: failure()
        shell: bash
        run: |
          gh issue create --repo ${{ env.gh_issue_repo }} --title "Weekly Regression Test Failure" --body "AWS box with instance-id ${{ env.instance_id }} could not be started"


  run-benchmarks-on-runner:
    name: Make duckdb and generate benchmark data
    needs: 
      - start-runner
    runs-on: self-hosted
    env:
      GEN: ninja
      BUILD_BENCHMARK: 1
      BUILD_TPCH: 1
      BUILD_TPCDS: 1
      BUILD_HTTPFS: 1
      BUILD_JEMALLOC: 1
      
    steps: 
      - name: Install
        shell: bash
        run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build awscli cmake make python-is-python3 libssl-dev pip

      - name: Install requests
        shell: bash
        run: python3 -m pip install requests

      - name: Setup Ccache
        uses: hendrikmuhs/ccache-action@main

      - name: move duckdb-main to duckdb-old
        shell: bash
        run: |
          if [ ! -d "duckdb-main" ]; then
            git clone https://github.com/duckdb/duckdb duckdb-main
            cd duckdb-main
            make 
            cd ..
          fi
          # if previous_failed exists, last run regressed, so we don't update duckdb-old
          if [ ! -f previous_failed.txt ]; then
            rm -rf duckdb-old
            mkdir -p duckdb-old
            cp -R duckdb-main/* duckdb-old
          fi


      - uses: actions/checkout@v4
        with:
          repository: 'duckdb/duckdb'
          path: 'duckdb-main'
          fetch-depth: 0

      - name: Build
        shell: bash
        working-directory: duckdb-main
        run: |
          make clean
          make

      - name: mount duckdb_benchmark_data to persistent storage
        shell: bash
        working-directory: duckdb-main
        run: |
          rm -rf duckdb_benchmark_data
          sudo mkfs -t xfs -f /dev/nvme1n1
          mkdir duckdb_benchmark_data
          sudo mount /dev/nvme1n1 duckdb_benchmark_data
          sudo chown -R ubuntu duckdb_benchmark_data

      - name: Set up benchmarks
        shell: bash
        working-directory: duckdb-main
        run: |
          cp -r benchmark ../duckdb-old

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Load data for sf 100 benchmarks
        working-directory: duckdb-main/duckdb_benchmark_data
        shell: bash
        run: |
          ./duckdb-main/build/release/duckdb tpch_sf100.duckdb -c "call dbgen(sf=1);"
          # aws s3 cp s3://duckdb-blobs/data/tpch-sf100.db tpch_sf100.duckdb 1> /dev/null

      - name: Regression Test TPCH
        working-directory: duckdb-main
        id: run_tpch
        if: always()
        shell: bash
        run: |
          python scripts/regression_test_runner.py --old=../duckdb-old/build/release/benchmark/benchmark_runner --new=build/release/benchmark/benchmark_runner --benchmarks=.github/regression/large.csv --verbose > regression_output.txt

      - name: Create duckdb-internal issue if faiure
        if: failure()
        shell: bash
        run: |
          ./duckdb-old/build/release/duckdb -c "pragma version" > old_version.txt
          ./duckdb-main/build/release/duckdb -c "pragma version" > main_version.txt
          printf "``` \n Regressed Version \n$(cat main_version.txt)\n OLD VERSION \n$(cat old_version.txt)\n``` > issue_body.txt
          printf "Regression Output \n ``` \n $(cat regression_output.txt) \n ``` "  >> issue_body.txt
          gh issue create --repo ${{ env.gh_issue_repo }} --label "High Priority" --title "Weekly Regression Test Failure" --body-file issue_body.txt
          touch previous_failed.txt # notify next run that it should not update duckdb-old

      - name: Remove previous previous_failed
        if: success()
        shell: bash
        run: |
          rm -f previous_failed.txt

      - name: shut down
        if: always()
        shell: bash
        run: sudo shutdown

  stop-ec2-runner:
    name: Turn off machine
    runs-on: ubuntu-latest
    needs:
      - start-runner # required to get output from the start-runner job
      - run-benchmarks-on-runner # required to wait when the main job is done

    steps:
      - name: Configure AWS credentials
        if: always()
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Stop machine
        if: always()
        shell: bash
        run: aws ec2 stop-instances --instance-ids ${{ env.instance_id }}

